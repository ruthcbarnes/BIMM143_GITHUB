---
title: "Class 13: DESeq lab (pt.1)"
author: "Ruth Barnes: A16747659"
date: 02-18-2025
toc: true
format: pdf
---

Today we will analyze data from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects.

# Import countData and colData

There are two datasets I need to import/read: 

- `countData` the transcript counts per gene (rows) in the different experiments 

- `colData` information about the columns (i.e. experiments) in `countData`

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

We an have a wee peak at these with `head()`

```{r}
head(counts)
```

```{r}
head(metadata)
```

***Q1. How many genes are in this dataset?***

```{r}
nrow(counts)
```

There are 38694 genes in this dataset.

***Q2. How many ‘control’ cell lines do we have?***

```{r}
table(metadata$dex)
```

or 

```{r}
sum(metadata$dex == "control")
```

There are four 'control' cell lines in the metadata dataset

# Toy differential gene expression

We can find the average (mean) count values per gene for all "control" experiments and compare it to the mean values for "treated"

- Extract all "control" columns from the  `counts` data
- Find the mean value for each gene in these columns

```{r}
control.inds <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control.inds$id]
```


```{r}
dim(control.counts)
```

Now find the row wise mean:

```{r}
control.mean <- rowSums( control.counts )/4
head(control.mean)
```

vs

```{r}
control.mean <- rowSums( control.counts )/ncol(control.counts)
head(control.mean)
```

***Q3. How would you make the above code in either approach more robust? Is there a function that could help here?***

To make the code more robust you can use `ncol(control.counts)` instead of using hard code through the #4. The function `ncol()` could be of help here.

***Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)***

```{r}
treated.inds <- metadata[metadata$dex == "treated", ]
treated.counts <- counts[, treated.inds$id] 
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

Let's put these two mean values together:

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

Let's have a week look - i.e. plot countrol.mean vs treated.mean

***Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.***

```{r}
plot(meancounts[,1], meancounts[,2])
```

***Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot.***

You would use `geom_point()` function for this plot.

```{r}
library(ggplot2)
ggplot(meancounts) +
  aes(control.mean, treated.mean, alpha = 0.4) +
  geom_point()
```

Whenever we see data that is so heavily skewed like this we often log transform it so we can see what is going on more easily. 

***Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?*** 

The argument to plot() that allows you to do this is the `log()` function.

```{r}
plot(log(meancounts))
```
or 

```{r}
plot(meancounts, log = "xy")
```

We most often work in log2 units as this makes the math easier. Let's have a play to see this:

```{r}
# control / treated
log2(20/20)
```

```{r}
log2(40/20)
```

```{r}
# treated / control
log2(20/40)
```

```{r}
log2(80/20)
```

We can now add a "log2 fold-change" values to our `meancountrs` dataset 

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)
head(meancounts)
```

We need to filter out zero count genes - i.e. remove the rows (genes) that have a 0 value in either control or treated means. 

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

***Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?***

The purpose of the arr.ind argument in the which() function calls above, is to ensure that the function shows the rows and columns of the elements that satisfy the condition (i.e. elements that are 0 in the first two columns of meancounts).

Q. How many genes are "up" regulated at the common log2 fold-change threshold of +2?

```{r}
up.inds <- mycounts$log2fc >= 2
sum(up.inds, na.rm=T)
```

***Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?***

```{r}
up.inds <- mycounts$log2fc > 2
sum(up.inds, na.rm=T)
```

There are 250 up regulated genes that we have at the greater than 2 fc level.

Q. How many genes are "down" regulated at the threshold of -2?

```{r}
down.inds <- mycounts$log2fc <= (-2)
sum(down.inds, na.rm=T)
```

***Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?*** 

```{r}
down.inds <- mycounts$log2fc < -2
sum(down.inds, na.rm = T)
```
There are 367 down regulated genes that we have at the greater than 2 fc level.

***Q10. Do you trust these results? Why or why not?***

I do not trust these results because it does not show statstical evidence of a statistical difference.

# DESeq2 analysis

To do this the right way we need to consider the significance fo the differences not just their magnitude.

```{r}
#| message: false
library(DESeq2)
```

To use this package it want countData and colData in a specific format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata
                       ,design = ~dex)
```

```{r}
dds <- DESeq(dds)
```

Extract my results:

```{r}
res <- results(dds)
head(res)
```

Plot of fold-change vs P-value (adjusted for multiple testing):

```{r}
plot(res$log2FoldChange, res$padj)
```

Take to log of the P-value:

```{r}
plot(res$log2FoldChange, log(res$padj))
```

```{r}
log(0.01)
```

```{r}
log(0.0000001
    )
```

We can just flip the y-axis by putting a negative in front of `log(res$padj)`

```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab = "Log2 Fold-change", 
     ylab = "-log(P-value)")
```

Let's save out work to data: 

```{r}
write.csv(res, file = "myresults.csv")
```


To finish off let's make a nicer volcano with ggplot:
- Add the log2 threshold lines at +2/-2 
- Add P-value threshold lines at 0.05
- Add color to highlight the subset of genes that meet both of the above threshold

```{r}
mycols <- rep("grey", nrow(res))
mycols[res$log2FoldChange >= 2] <- "red"
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$padj > 0.05] <- "gray"
```


```{r}
library(EnhancedVolcano)
ggplot(res) +
  aes(log2FoldChange, -log(padj)) +
  geom_point(col=mycols) + 
  geom_vline(xintercept = c(-2,2), col="red", linetype = "dashed") +
  geom_hline(yintercept = -log(0.05), col = "red", linetype = "dashed")
```

## Add gene annotation data

Now the question is what are the blue points in the above volcano plot - i.e. what are the genes most influences by drug treatment here?

We will use some BioConductor packages to "map" the ENSEMBLE ids to more useful gene SYMBOL names/ids. 

We can install these packages with:
`BiocManager::install("AnnotationDbi")`

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

What database identifiers can I translate between here: 

```{r}
columns(org.Hs.eg.db)
```

We can now use the `mapIDs()` function to translate/map between these different identifier formats.

Let's add SYMBOL, GENENAME and ENTREZID
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                       keys=rownames(res),
                       keytype = "ENSEMBL",
                       column = "SYMBOL")
res$genename <- mapIds(org.Hs.eg.db,
                       keys=rownames(res),
                       keytype = "ENSEMBL",
                       column = "GENENAME")

res$entrezid <- mapIds(org.Hs.eg.db,
                       keys=rownames(res),
                       keytype = "ENSEMBL",
                       column = "ENTREZID")
  
head(res)
```

## Pathway analysis

Now I know the gene names and their IDs in different databases I want to know what type of biology they are involved in...

This is the job of "pathway analysis" (a.k.a "gene set enrichment")

There are tones of different BioConductor packages for pathway analysis here we use just one of them called **gage** and **pathwview**. I will install these packages with `BiocMangaer::install(c("gage", "pathview", "gageData"))`

```{r}
library(pathview)
library(gage)
library(gageData)
```


Load up the KEGG genesets
```{r}
data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs)
```

We will use these KEGG genesets (a.k.a. pathways) and our `res` results to see what overlaps. To do this we will use the `gage()` function.

For input `gage()` wants just a vector of importance - in our case FoldChange values.

```{r}
foldchanges <- res$log2FoldChange
head(foldchanges)
```

vectors in R can have "names" that are useful for book-keeping so we know what a given values correseponds to, e.g. 

```{r}
x <- c(10, 100, 20)
names(x) <- c("barry", "alic", "chandra")
x
```

Let's put names on our `foldchanges` vector - here we will use `res$entrez`

```{r}
names(foldchanges) <- res$entrezid
head(foldchanges)
```

Now we can run "pathway analysis"
```{r}
keggres <- gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
head(keggres$less)
```

We can get a pathway image file with our genesets highlighted via the `pathview()` function.

```{r}
pathview(foldchanges, pathway.id = "hsa05310")
```

Insert this figure in my report:
![](hsa05310.pathview.png)









